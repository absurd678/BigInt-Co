--------------- АРХИТЕКТУРА ПРОГРАММЫ --------------------
1. Класс BigInt - работа с большими числами
2. Класс PrimalityTests - вероятностные тесты простоты
3. Основная программа - тестирование и демонстрация


---------------- КЛАСС PrimalityTests - ВЕРОЯТНОСТНЫЕ ТЕСТЫ

Основная идея вероятностных тестов:
- Они не доказывают простоту на 100%, но дают высокую вероятность.
- Если тест говорит "простое" - оно вероятно простое.
- Если говорит "составное" - оно точно составное.

---- Метод 1: ТЕСТ МИЛЛЕРА-РАБИНА
Алгоритм:
- Проверка малых простых: 2, 3, 5, 7, 11...
- Разложение: n-1 = d × 2^s
- Случайные свидетели: Выбираем случайные числа a
- Проверка условий:
    Если a^d ≡ 1 (mod n) - вероятно простое
    Если a^(d×2^r) ≡ -1 (mod n) - вероятно простое
- Повторение: 10-25 раз для надежности

Пример для n = 101:
n-1 = 100 = 25 × 2² (d=25, s=2)
Проверяем a=2:
  2²⁵ mod 101 = 10 ≠ 1
  2⁵⁰ mod 101 = 100 ≡ -1 mod 101 ✓
Результат: вероятно простое


---- Метод 2: ТЕСТ ЛЮКА НА СИЛЬНУЮ ПСЕВДОПРОСТОТУ

Алгоритм:
- Находим параметры: Числа P, Q, D
- Последовательность Люка: Вычисляем Uₙ, Vₙ
- Проверка условий:
        Uₙ ≡ 0 (mod n)
        Vₙ ≡ 2 (mod n)
- Повторение: С разными параметрами

Пример:
Для n = 1000000007:
1. Находим D = 5 (подходящий параметр)
2. Вычисляем последовательность Люка
3. Проверяем Uₙ ≡ 0 mod n
4. Если условие выполняется → вероятно простое


---- Метод 3: ТЕСТ BPSW (Baillie-PSW)
// Комбинация двух тестов
return millerRabinTest(n) && lucasStrongTest(n);

----------------------- 3. ВСПОМОГАТЕЛЬНЫЕ МЕТОДЫ

Генерация свидетелей: 
vector<BigInt> witnesses = getWitnesses(n, 10); // Создает 10 случайных чисел от 2 до n-2

Проверка свидетеля:
bool is_witness = isWitness(a, n); // Проверяет, является ли a свидетелем составности n

Сравнение тестов:
PrimalityTests::compareAllTests(n, 50); // Запускает все 3 теста по 50 раз и сравнивает результаты


---------------------- 4. ОСНОВНАЯ ПРОГРАММА - ЧТО И КАК ТЕСТИРУЕТ

---- Этап 1: Демонстрация на одном числе
BigInt test_prime("1000000007");

// Тест Миллера-Рабина 100 раз
millerRabinStatistics(test_prime, 100);

// Тест Люка 100 раз  
lucasStrongStatistics(test_prime, 100);

// Тест BPSW 100 раз
bpswStatistics(test_prime, 100);

// Сравнение всех тестов
compareAllTests(test_prime, 100);


---- Этап 2: Тестирование на разных числах

vector<BigInt> test_numbers = {
    BigInt("101"),           // 3 цифры
    BigInt("1009"),          // 4 цифры
    BigInt("1000003"),       // 7 цифр
    BigInt("1000000007"),    // 10 цифр
    BigInt("10000000019")    // 11 цифр
};

---- Этап 3: Проверка с GMP

// Сравниваем наши результаты с промышленной библиотекой
mpz_class gmp_num("1000000007");
int gmp_result = mpz_probab_prime_p(gmp_num.get_mpz_t(), 25);
bool our_result = bpswTest(BigInt("1000000007"), 10);

---- Этап 4: Комплексный анализ

PrimalityTests::runComprehensiveAnalysis();

Тестирует:
 -   Разные размеры чисел (10-14 цифр)
 -   Статистику успешности
 -   Время выполнения
 -   Сравнение методов