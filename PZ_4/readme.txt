### Что такое детерминированный тест на простоту?
Детерминированный тест - это алгоритм, который ВСЕГДА дает правильный ответ:
- Если число простое → вернет TRUE
- Если число составное → вернет FALSE

В отличие от вероятностных тестов (Миллера-Рабина), которые могут ошибаться.

### Основные теоремы:

Малая теорема Ферма:
Если p - простое число, то для любого целого a:
a^p ≡ a (mod p)

Теорема Агравала-Каяла-Саксены:
Число n > 1 является простым тогда и только тогда, когда:
(X + a)^n ≡ X^n + a (mod X^r - 1, n)
для всех a от 1 до некоторого предела.

### Алгоритм AKS (6 шагов):
Шаг 1: Проверка на совершенную степень. Если число можно представить как a^b (где b > 1), то оно составное.
Пример: 8 = 2^3, 16 = 4^2, 27 = 3^3

bool isPerfectPower(const BigInt& n) {
    // Проверяем, является ли n = a^b для некоторых a,b > 1
    // Если да - число составное
}
--------------------
Шаг 2: Нахождение параметра r. Нам нужно найти специальное число r, которое будет использоваться
в полиномиальной проверке.

BigInt findSmallestR(const BigInt& n) {
    // Ищем наименьшее r такое, что:
    // 1. gcd(r, n) = 1 (r и n взаимно просты)
    // 2. ord_r(n) > log²n (порядок n по модулю r)
}
---------------------
Шаг 3: Проверка малых делителей. Проверяем все числа от 2 до r. Если находим делитель - число составное.

for (BigInt a(2); a <= r && a < n; a = a + BigInt(1)) {
    BigInt gcd_val = BigInt::gcd(a, n);
    if (gcd_val > BigInt(1) && gcd_val < n) {
        return false; // Найден делитель
    }
}
--------------------
Шаг 4: Проверка n ≤ r. Если n меньше или равно r, то мы уже проверили все возможные делители.

if (n <= r) {
    return true; // Число простое
}
--------------------
Шаг 5: Полиномиальная проверка. Это САМЫЙ ВАЖНЫЙ шаг. Мы проверяем полиномиальное тождество.
В реальном AKS это требует работы с полиномами, но в нашей реализации мы используем числовую аппроксимацию для простоты.

bool checkPolynomialAKS(const BigInt& n, const BigInt& r) {
    // Проверяем для всех a от 1 до √φ(r) * log n:
    // (X + a)^n ≡ X^n + a (mod X^r - 1, n)
}

--------------------

